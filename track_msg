#!/usr/bin/python
#
# postfix-msg-track.py
# Khosrow Ebrahimpour - May 2012
# this script will track messages in the postfix log file

"""Search postfix logs for emails by making a match on sender and recipient. 

The message(s) are displayed as they are queued and sent by Postfix.

Usage: track_msg -l [LOGFILE] -f [SENDER ADDRESS] -t [RECIPIENT ADDRESS] [OPTIONS] 

Options:
    -h/--help
        show this message

    -l LOGFILE
        --logfile=LOGFILE
        name of the logfile to analyze

    -f FROM_ADDR
    --from=FROM_ADDR
        email address of the sender

    -t TO_ADDR
    --to=TO_ADDR
        email address of the recipient

    -d DAY
    --day=DAY
        date stamp of the email. Format: <MMM DD>, <MMM DD HH:from_re> or <MMM DD HH:mm:ss>

    -c/--color
        enable color coding of the queue IDs

    -v/--verbose
        display debug information
""" 

import re
import getopt
import sys 

from termcolor import colored, cprint

program = sys.argv[0]
COLOR = False
DEBUG = False

class Message:
    def __init__(self,pid,date):
        self.pid = pid
        self.date = date
        self.qid_list = list()
        self.msg_id = ""
        self.color = ""
    def getpid(self):
        return self.pid
    def getdate(self):
        return self.date
    def getqlist(self):
        return self.qid_list    
    def addqid(self,qid):
        self.qid_list.append(qid)
    def removeqid(self,qid):
        self.qid_list.remove(qid)
    def hasqid(self,qid):
        for q in self.qid_list:
            if qid == q:
                return True
        return False          
    def addmsgid(self,msgid):
        self.msg_id = msgid
    def getmsgid(self):
        return self.msg_id
                
def usage(code,msg=''): 
    if code:
        fd = sys.stderr
    else:
        fd = sys.stdout
    print >> fd, __doc__
    if msg:
        print >> fd, msg
    sys.exit(code)

# def log(msg, debug_mode):
def log(msg):
    if DEBUG:
        print "DEBUG -- " + msg

def main():
    global DEBUG
    global COLOR
    logfile = ""
    from_addr = ""
    to_addr = ""
    date_stamp = ""
    msg_list = list()
    colors = ['grey' , 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white']
    color_counter = 0

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hl:f:t:d:cv", ["help", "logfile=", "from=", "to=", "day=", "color", "verbose"])
    except getopt.error, msg:
        usage(2, msg)

    if not opts:
        usage(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage(0)
        elif opt in ("-l", "--logfile"):
            logfile = arg
        elif opt in ("-f", "--from"):
            m = re.search("(.*)@(.*)", arg, re.IGNORECASE)
            if ( m != None):
                from_addr = arg
            else:
                usage(2, msg="ERROR: From address must be a correctly formatted email address.")
        elif opt in ("-t", "--to"):
            to_addr = arg
        elif opt in ("-d", "--day"):
            date_stamp = arg
        elif opt in ("-c", "--color"):
            COLOR = True
        elif opt in ("-v", "--verbose"):
            DEBUG = True

    if not from_addr or not to_addr or not logfile:
        usage(2, msg="FROM_ADDR, TO_ADDR, and LOGFILE are mandatory")
    
    if not sys.stdout.isatty():
        COLOR = False
    
    if COLOR:
        color = "white"
    else:
        color = None
    
    print colored("Search Params", color)
    print colored("-------------", color)
    print colored("Sender: " + from_addr, color)
    print colored("Recipient: " + to_addr, color)
    print colored("Day: " + date_stamp, color)
    print colored("-------------", color)

    try:
        for line in open(logfile):
            # extract timestamps of messages with matching to, from, and day if defined
            # sample line:
            # May 23 14:20:38 servername postfix/smtpd[9463]: NOQUEUE: filter: RCPT from mailhost.example.com[10.10.10.11]: <mailhost.example.com[10.10.10.11]>: Client host triggers FILTER smtp:[127.0.0.1]:10025; from=<john.doe@example.com> to=<jane.doe@example.org> proto=ESMTP helo=<mailhost.example.com>
            # tokenize the log line
            if ( date_stamp == "" ):        
                #search_query = "^(\w\w\w \s?\d\d? \d\d:\d\d:\d\d) (.* NOQUEUE: .*) (<.*]>:) (.*) (from=<"+from_addr+">) (to=<"+to_addr+".*>) (.*)"
                #search_query = "(\w\w\w \s?\d\d? \d\d:\d\d:\d\d) (.+) (postfix/\w+\[)(\d+)(\]:) (\w): (.*) (from=<"+from_addr+">) (to=<"+to_addr+".*> (.*)"
                search_query = "(\w\w\w \s?\d\d? \d\d:\d\d:\d\d) (.*) (postfix/\w+\[)(\d+)(\]:) (\w+): (.*)"
            else:
                #search_query = "("+date_stamp+" \d\d:\d\d:\d\d) (.* NOQUEUE: .*) (<.*]>:) (.*) (from=<"+from_addr+">) (to=<"+to_addr+".*>) (.*)"
                #search_query = "("+date_stamp+" \d\d:\d\d:\d\d) (.+) (postfix/\w+\[)(\d+)(\]:) (\w): (.*) (from=<"+from_addr+">) (to=<"+to_addr+".*> (.*)"
                search_query = "("+date_stamp+" \d\d:\d\d:\d\d) (.+) (postfix/\w+\[)(\d+)(\]:) (\w): (.*)"
            
            # Search for a line that contains both from_addr and to_addr and the date_stamp
            m = re.search(search_query, line, re.IGNORECASE)
            if m is not None:
                # name all matched fields for ease of use
                timestamp = m.group(1)
                hostname = m.group(2)
                postfix_process = m.group(3)
                postfix_pid = m.group(4)
                queue_id = m.group(6)
                generic_text = m.group(7)

                # Search for the from and to
                from_re = re.search("(.*) (from=<"+from_addr+">) (to=<"+to_addr+".*>) (.*)", generic_text, re.IGNORECASE)
                # Search for the message-id
                messageid_re = re.search("message-id=<(.*)>", generic_text, re.IGNORECASE)
                # if there's a line with the "from" and "to" that we want, record the pid and date in a Message obj
                if from_re is not None and queue_id == "NOQUEUE":
                    # make a msg object
                    msg = Message(postfix_pid, timestamp)
                    msg_list.append(msg)
                    color_counter += 1
                    # log("timestamp: " + timestamp, DEBUG)
                    log("timestamp: " + timestamp)
                    # log("postifx/smtp PID: " + postfix_pid, DEBUG)
                    log("postifx/smtp PID: " + postfix_pid)
                    if COLOR:
                        color = None
                        attr = ['reverse']
                    else:
                        color = None
                        attr = None
                    cprint(line.rstrip(), color, attrs=attr)                    
                # elif messageid_re is not None and msg_list:
                #     log("found message-id: " + messageid_re.group(1))
                #     for msg in msg_list:
                #         log("Message object's msg id: " + msg.getmsgid())
                #         if msg.getmsgid() == messageid_re.group(1):
                #             #TODO: color the output
                #             print line,
                #             msg.addqid(queue_id)                                    
                # find the queue id of the message and append it to the last Msg in the list
                # if postfix_pids and timestamps and queue_id != "NOQUEUE":
                elif msg_list and postfix_pid == msg_list[-1].getpid() and timestamp == msg_list[-1].getdate():
                    log("storing qid: " + queue_id)
                    msg_list[-1].addqid(queue_id)   
                    #TODO: color the output
                    print line,
                else:
                    for msg in msg_list:
                        if msg.hasqid(queue_id):
                            #TODO: color the output
                            print line,
                            if generic_text == "removed":
                                msg.removeqid(queue_id)
                                # if all the queued messages have been dealt with, remove msg object
                                if len(msg.getqlist()) == 0:
                                    msg_list.remove(msg)
                            else:    
                                if messageid_re is not None:
                                    log("found message-id: " + messageid_re.group(1))
                                    msg.addmsgid(messageid_re.group(1))
                        elif messageid_re is not None and msg.getmsgid() == messageid_re.group(1):
                            log("Message object's msg id: " + msg.getmsgid())
                            #TODO: color the output
                            print line,
                            msg.addqid(queue_id)
                                                 
        if COLOR:
            color = "white"
            attr = ['bold']
        else:
            color = None
            attr = None
        print ""
        cprint("Summary:", color, attrs=attr)
        cprint("----------------", color, attrs=attr)
        cprint("Found " + str(color_counter) + " email(s).", color, attrs=attr)
    except IOError:
        print "Error: unable to read", logfile
        sys.exit(1)
            
if __name__ == "__main__":
    main()